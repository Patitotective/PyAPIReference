"""PyApiReference is a GUI application to generate Python Api References.

About:
	GitHub: https://github.com/Patitotective/PyApiReference
	Patitotective:
		Discord: patitotective#0127
		GitHub: https://github.com/Patitotective
	Sharkface:
		Discord: Sharkface#9495
		GitHub: https://github.com/devp4
"""

# Libraries
import inspect
import os
import sys
import PREFS
from importlib.util import spec_from_file_location, module_from_spec
# PyQt5
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QFileDialog, QPushButton, QGridLayout, QFormLayout
from PyQt5.QtCore import Qt

# Dependencies
from inspect_object import inspect_object
from collapsible_widget import CollapsibleWidget


class MainWindow(QMainWindow):
	def __init__(self, parent=None):
		super().__init__()

		self.init_window()

		self.show()

	def init_window(self):
		self.setWindowTitle("PyApiReference")
		self.setStyleSheet("background-color: #dcdee0;")

		self.main_widget = MainWidget(parent=self)
		self.setCentralWidget(self.main_widget)

class MainWidget(QWidget):
	def __init__(self, parent=None):
		super().__init__()

		self.widgets = {
			"module_content_widget": [], 
		}

		self.init_window()

	def init_window(self):
		self.setLayout(QGridLayout())

		self.main_frame()

	def main_frame(self):
		logo = QLabel("PyApiReference")
		logo.setStyleSheet("font-size: 20px; font-weight: bold;")
		logo.setAlignment(Qt.AlignCenter)

		load_file_button = QPushButton("Load file")
		load_file_button.clicked.connect(self.load_file)

		self.layout().addWidget(logo, 0, 0, 1, 0, Qt.AlignTop)
		self.layout().addWidget(load_file_button, 1, 0, Qt.AlignTop)
		self.layout().setRowStretch(1, 1)		

	def load_file(self):
		path, file_filter = QFileDialog.getOpenFileName(
			parent=self, 
			caption="Select a file", 
			directory=os.path.basename(os.getcwd()), # Get basename of current directory, e.g.: PyApiReference/PyApiReference/main.py -> PyApiReference/PyApiReference
			filter="Python files (*.py)") # Filter Python files

		# If filename equals empty string means no selected file
		if path == '':
			return

		module_content = inspect_object(self.get_module_from_path(path))

		if len(self.widgets["module_content_widget"]) > 0:	
			self.widgets["module_content_widget"][0].setParent(None)
			self.widgets["module_content_widget"] = []
		
		self.layout().addWidget(self.create_module_content_widget(module_content), 2, 0, 1, 0, Qt.AlignTop)

	def get_module_from_path(self, path: str):
		filename = os.path.basename(path) # filename means only the filename without the path, e.g.: PyApiReference/PyApiReference/main.py -> main.py
		filename_without_extension = os.path.splitext(filename)[0]
	
		spec = spec_from_file_location(filename_without_extension, path)
		module = module_from_spec(spec)
		spec.loader.exec_module(module)

		return module

	def create_module_content_widget(self, module_content: dict):
		module_content_widget = QWidget()
		module_content_widget.setLayout(QGridLayout())

		module_collapsible = self.create_collapsible_object(module_content)

		module_content_widget.layout().addWidget(module_collapsible, 0, 0, Qt.AlignTop)

		self.widgets["module_content_widget"].append(module_content_widget)
		return module_content_widget


	def create_collapsible_object(self, object_content: dict):
		def create_object_properties_widget(object_properties: dict):
			"""Given an dictionary with the object_properties return a widget with properties positioned on labels.
			"""
			object_properties_widget = QWidget()
			object_properties_widget.setLayout(QFormLayout())

			for property_name, property_value in object_properties.items():
				property_content = {property_name: property_value}
				if property_name == "content":
					continue

				elif property_name == "parameters":
					parameters_collapsible_widget = CollapsibleWidget(property_name)
					for parameter_name, parameter_properties in property_value.items():
						parameters_collapsible_widget.addWidget(QLabel(parameter_name))					

					object_properties_widget.layout().addRow(parameters_collapsible_widget)				
					continue

				object_properties_widget.layout().addRow(property_name, QLabel(str(property_value)))				
		
			return object_properties_widget

		"""Generates a collapsible widget for a given object_content generated by inspect_object
		"""
		object_name = tuple(object_content)[0]
		object_properties = object_content[object_name]

		collapsible_object = CollapsibleWidget(object_name)
		collapsible_object.addWidget(create_object_properties_widget(object_content[object_name]))

		if "content" in object_properties:
			property_name = "content"
		elif "parameters" in object_properties:
			property_name = "parameters"		
		else:
			print(f"Not valid object {object_name} with {object_properties} properties")
			return 	collapsible_object

		for member_name, member_properties in object_content[object_name][property_name].items():
			member_content = {member_name: member_properties}
			
			if "content" in member_properties or "parameters" in member_properties:
				collapsible_object.addWidget(self.create_collapsible_object(member_content))
				continue

		return collapsible_object

def init_app():
	app = QApplication(sys.argv)
	main_window = MainWindow()

	sys.exit(app.exec_())

def hello():
	def bye():
		pass

if __name__ == "__main__":
	#print(inspect.getmembers(hello)) # Testing inspect_object
	init_app() # Uncomment this to run the gui
